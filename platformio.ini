; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[platformio]
default_envs = generic_esp32
extra_configs =
    platformio_override.ini

[env]
; Make sure to NOT add any spaces in the custom_ci_action property
; (also the position in the file is important)
custom_ci_action = generic_esp32

framework = arduino
platform = espressif32@6.7.0

build_flags =
    -DPIOENV=\"$PIOENV\"
    -D_TASK_STD_FUNCTION=1
    -D_TASK_THREAD_SAFE=1
    -DCONFIG_ASYNC_TCP_EVENT_QUEUE_SIZE=128
    -DCONFIG_ASYNC_TCP_QUEUE_SIZE=128
    -Wall -Wextra -Wunused -Wmisleading-indentation -Wduplicated-cond -Wlogical-op -Wnull-dereference
;   Have to remove -Werror because of
;   https://github.com/espressif/arduino-esp32/issues/9044 and
;   https://github.com/espressif/arduino-esp32/issues/9045
;    -Werror
    -std=c++17
    -std=gnu++17
build_unflags =
    -std=gnu++11

lib_deps =
    mathieucarbou/ESP Async WebServer @ 2.10.8
    bblanchon/ArduinoJson @ 7.0.4
    https://github.com/arkhipenko/TaskScheduler#testing

extra_scripts =
    pre:pio-scripts/auto_firmware_version.py
    pre:pio-scripts/patch_apply.py
    post:pio-scripts/create_factory_bin.py

board_build.partitions = partitions_custom_4mb.csv
board_build.filesystem = littlefs
board_build.embed_files =
    webapp_dist/index.html.gz
    webapp_dist/zones.json.gz
    webapp_dist/favicon.ico
    webapp_dist/favicon.png
    webapp_dist/js/app.js.gz
    webapp_dist/site.webmanifest

custom_patches =

monitor_filters = esp32_exception_decoder, time, log2file, colorize
monitor_speed = 115200
upload_protocol = esptool

; Specify port in platformio_override.ini. Comment out (add ; in front of line) to use auto detection.
; monitor_port = COM4
; upload_port = COM4


[env:generic_esp32]
board = esp32dev
build_flags = ${env.build_flags}


[env:olimex_esp32_poe]
; https://www.olimex.com/Products/IoT/ESP32/ESP32-POE/open-source-hardware
board = esp32-poe
build_flags = ${env.build_flags}
    -DOPENDTU_ETHERNET


[env:olimex_esp32_evb]
; https://www.olimex.com/Products/IoT/ESP32/ESP32-EVB/open-source-hardware
board = esp32-evb
build_flags = ${env.build_flags}
    -DOPENDTU_ETHERNET

[env:wt32_eth01]
; http://www.wireless-tag.com/portfolio/wt32-eth01/
board = wt32-eth01
build_flags = ${env.build_flags}
    -DOPENDTU_ETHERNET
